/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BeebitsInterface extends ethers.utils.Interface {
  functions: {
    "SALE_LIMIT()": FunctionFragment;
    "TOKEN_LIMIT()": FunctionFragment;
    "acceptBeebitBid(uint256,uint256)": FunctionFragment;
    "acceptTrade(address,address,uint256,uint256[],uint256,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "beebitsBids(uint256)": FunctionFragment;
    "beebitsListings(uint256)": FunctionFragment;
    "bidForListing(uint256)": FunctionFragment;
    "bnbBalance(address)": FunctionFragment;
    "buyBeebit(uint256)": FunctionFragment;
    "cancelOffer(address,address,uint256,uint256[],uint256,uint256[],uint256,uint256)": FunctionFragment;
    "cancelledListings(bytes32)": FunctionFragment;
    "cancelledOffers(bytes32)": FunctionFragment;
    "changeSaleCount(uint256)": FunctionFragment;
    "communityGrant()": FunctionFragment;
    "contentHash()": FunctionFragment;
    "contractSealed()": FunctionFragment;
    "creatorNftMints(uint256)": FunctionFragment;
    "deListBeebit(uint256,address,bytes32)": FunctionFragment;
    "deposit()": FunctionFragment;
    "devMint(uint256,address)": FunctionFragment;
    "endCommunityGrant()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getPrice()": FunctionFragment;
    "hashToSign(address,address,uint256,uint256[],uint256,uint256[],uint256,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "listBeebit(uint256,uint256)": FunctionFragment;
    "marketPaused()": FunctionFragment;
    "mint()": FunctionFragment;
    "mintWithBunk(uint256)": FunctionFragment;
    "mintsRemaining()": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pauseMarket(bool)": FunctionFragment;
    "publicSale()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "saleDuration()": FunctionFragment;
    "saleStartTime()": FunctionFragment;
    "sealContract()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "startSale(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradeValid(address,address,uint256,uint256[],uint256,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawBeebitBid(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SALE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBeebitBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTrade",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "beebitsBids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beebitsListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidForListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bnbBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyBeebit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledListings",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledOffers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSaleCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "communityGrant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contentHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractSealed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorNftMints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deListBeebit",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devMint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "endCommunityGrant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashToSign",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listBeebit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintWithBunk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintsRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseMarket",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "publicSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "saleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sealContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeValid",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBeebitBid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "SALE_LIMIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptBeebitBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beebitsBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beebitsListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnbBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyBeebit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSaleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractSealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorNftMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deListBeebit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endCommunityGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashToSign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listBeebit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithBunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintsRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "publicSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sealContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradeValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBeebitBid",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BeebitBidPlaced(uint256,uint256,address)": EventFragment;
    "BeebitBidWithdrawn(uint256,uint256,address)": EventFragment;
    "BeebitBought(uint256,uint256,address,address)": EventFragment;
    "BeebitDelisted(uint256)": EventFragment;
    "BeebitListed(uint256,uint256,address)": EventFragment;
    "CommunityGrantEnds()": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Mint(uint256,address,uint256)": EventFragment;
    "OfferCancelled(bytes32)": EventFragment;
    "SaleBegins()": EventFragment;
    "Trade(bytes32,address,address,uint256,uint256[],uint256,uint256[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeebitBidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeebitBidWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeebitBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeebitDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeebitListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityGrantEnds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleBegins"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Beebits extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BeebitsInterface;

  functions: {
    SALE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptBeebitBid(
      _tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptTrade(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    beebitsBids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        hasBid: boolean;
        beebitTokenId: BigNumber;
        bidder: string;
        bidValue: BigNumber;
      }
    >;

    beebitsListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean;
        tokenId: BigNumber;
        seller: string;
        minimumValue: BigNumber;
        sellTo: string;
      }
    >;

    bidForListing(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bnbBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyBeebit(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelledListings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelledOffers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeSaleCount(
      _newSaleCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    communityGrant(overrides?: CallOverrides): Promise<[boolean]>;

    contentHash(overrides?: CallOverrides): Promise<[string]>;

    contractSealed(overrides?: CallOverrides): Promise<[boolean]>;

    creatorNftMints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deListBeebit(
      _tokenId: BigNumberish,
      _newSeller: string,
      _listingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devMint(
      quantity: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endCommunityGrant(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashToSign(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listBeebit(
      _askerTokenId: BigNumberish,
      _askerMinPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithBunk(
      _createVia: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintsRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string] & { _name: string }>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _owner: string }>;

    pauseMarket(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publicSale(overrides?: CallOverrides): Promise<[boolean]>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startSale(
      _price: BigNumberish,
      _saleDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string] & { _symbol: string }>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradeValid(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBeebitBid(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SALE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  acceptBeebitBid(
    _tokenId: BigNumberish,
    minPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptTrade(
    maker: string,
    taker: string,
    makerWei: BigNumberish,
    makerIds: BigNumberish[],
    takerWei: BigNumberish,
    takerIds: BigNumberish[],
    expiry: BigNumberish,
    salt: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    _approved: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  beebitsBids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber] & {
      hasBid: boolean;
      beebitTokenId: BigNumber;
      bidder: string;
      bidValue: BigNumber;
    }
  >;

  beebitsListings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber, string] & {
      isForSale: boolean;
      tokenId: BigNumber;
      seller: string;
      minimumValue: BigNumber;
      sellTo: string;
    }
  >;

  bidForListing(
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bnbBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyBeebit(
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    maker: string,
    taker: string,
    makerWei: BigNumberish,
    makerIds: BigNumberish[],
    takerWei: BigNumberish,
    takerIds: BigNumberish[],
    expiry: BigNumberish,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelledListings(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelledOffers(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  changeSaleCount(
    _newSaleCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  communityGrant(overrides?: CallOverrides): Promise<boolean>;

  contentHash(overrides?: CallOverrides): Promise<string>;

  contractSealed(overrides?: CallOverrides): Promise<boolean>;

  creatorNftMints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deListBeebit(
    _tokenId: BigNumberish,
    _newSeller: string,
    _listingHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devMint(
    quantity: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endCommunityGrant(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  hashToSign(
    maker: string,
    taker: string,
    makerWei: BigNumberish,
    makerIds: BigNumberish[],
    takerWei: BigNumberish,
    takerIds: BigNumberish[],
    expiry: BigNumberish,
    salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listBeebit(
    _askerTokenId: BigNumberish,
    _askerMinPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketPaused(overrides?: CallOverrides): Promise<boolean>;

  mint(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithBunk(
    _createVia: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pauseMarket(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publicSale(overrides?: CallOverrides): Promise<boolean>;

  "safeTransferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  saleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  sealContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startSale(
    _price: BigNumberish,
    _saleDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradeValid(
    maker: string,
    taker: string,
    makerWei: BigNumberish,
    makerIds: BigNumberish[],
    takerWei: BigNumberish,
    takerIds: BigNumberish[],
    expiry: BigNumberish,
    salt: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferFrom(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBeebitBid(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SALE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    acceptBeebitBid(
      _tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    acceptTrade(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    beebitsBids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber] & {
        hasBid: boolean;
        beebitTokenId: BigNumber;
        bidder: string;
        bidValue: BigNumber;
      }
    >;

    beebitsListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isForSale: boolean;
        tokenId: BigNumber;
        seller: string;
        minimumValue: BigNumber;
        sellTo: string;
      }
    >;

    bidForListing(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bnbBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyBeebit(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelOffer(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelledListings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelledOffers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeSaleCount(
      _newSaleCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    communityGrant(overrides?: CallOverrides): Promise<boolean>;

    contentHash(overrides?: CallOverrides): Promise<string>;

    contractSealed(overrides?: CallOverrides): Promise<boolean>;

    creatorNftMints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deListBeebit(
      _tokenId: BigNumberish,
      _newSeller: string,
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(overrides?: CallOverrides): Promise<void>;

    devMint(
      quantity: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endCommunityGrant(overrides?: CallOverrides): Promise<void>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    hashToSign(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listBeebit(
      _askerTokenId: BigNumberish,
      _askerMinPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketPaused(overrides?: CallOverrides): Promise<boolean>;

    mint(overrides?: CallOverrides): Promise<BigNumber>;

    mintWithBunk(
      _createVia: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pauseMarket(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    publicSale(overrides?: CallOverrides): Promise<boolean>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    sealContract(overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startSale(
      _price: BigNumberish,
      _saleDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradeValid(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawBeebitBid(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    BeebitBidPlaced(
      tokenId?: null,
      bidValue?: null,
      bidder?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; bidValue: BigNumber; bidder: string }
    >;

    BeebitBidWithdrawn(
      tokenId?: null,
      bidValue?: null,
      bidder?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; bidValue: BigNumber; bidder: string }
    >;

    BeebitBought(
      tokenId?: null,
      price?: null,
      seller?: null,
      buyer?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      { tokenId: BigNumber; price: BigNumber; seller: string; buyer: string }
    >;

    BeebitDelisted(
      tokenId?: null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    BeebitListed(
      tokenId?: null,
      askingPrice?: null,
      buyerAddress?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { tokenId: BigNumber; askingPrice: BigNumber; buyerAddress: string }
    >;

    CommunityGrantEnds(): TypedEventFilter<[], {}>;

    Deposit(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    Mint(
      index?: BigNumberish | null,
      minter?: string | null,
      createdVia?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { index: BigNumber; minter: string; createdVia: BigNumber }
    >;

    OfferCancelled(hash?: null): TypedEventFilter<[string], { hash: string }>;

    SaleBegins(): TypedEventFilter<[], {}>;

    Trade(
      hash?: BytesLike | null,
      maker?: string | null,
      taker?: null,
      makerWei?: null,
      makerIds?: null,
      takerWei?: null,
      takerIds?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber[], BigNumber, BigNumber[]],
      {
        hash: string;
        maker: string;
        taker: string;
        makerWei: BigNumber;
        makerIds: BigNumber[];
        takerWei: BigNumber;
        takerIds: BigNumber[];
      }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Withdraw(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    SALE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    acceptBeebitBid(
      _tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptTrade(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    beebitsBids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beebitsListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidForListing(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bnbBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyBeebit(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelledListings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelledOffers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeSaleCount(
      _newSaleCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    communityGrant(overrides?: CallOverrides): Promise<BigNumber>;

    contentHash(overrides?: CallOverrides): Promise<BigNumber>;

    contractSealed(overrides?: CallOverrides): Promise<BigNumber>;

    creatorNftMints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deListBeebit(
      _tokenId: BigNumberish,
      _newSeller: string,
      _listingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devMint(
      quantity: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endCommunityGrant(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    hashToSign(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listBeebit(
      _askerTokenId: BigNumberish,
      _askerMinPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithBunk(
      _createVia: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseMarket(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publicSale(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startSale(
      _price: BigNumberish,
      _saleDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradeValid(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBeebitBid(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SALE_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptBeebitBid(
      _tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptTrade(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beebitsBids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beebitsListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidForListing(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bnbBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBeebit(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelledListings(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelledOffers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeSaleCount(
      _newSaleCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    communityGrant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contentHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractSealed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creatorNftMints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deListBeebit(
      _tokenId: BigNumberish,
      _newSeller: string,
      _listingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devMint(
      quantity: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endCommunityGrant(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashToSign(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listBeebit(
      _askerTokenId: BigNumberish,
      _askerMinPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithBunk(
      _createVia: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintsRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseMarket(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publicSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saleDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startSale(
      _price: BigNumberish,
      _saleDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeValid(
      maker: string,
      taker: string,
      makerWei: BigNumberish,
      makerIds: BigNumberish[],
      takerWei: BigNumberish,
      takerIds: BigNumberish[],
      expiry: BigNumberish,
      salt: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBeebitBid(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
